// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = very_safe_function() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = very_unsafe_function() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn very_safe_function() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (i32, bool);
    scope 1 {
        debug x => const 42_i32;
        scope 2 {
        }
    }

    bb0: {
        _1 = const 42_i32;
        _2 = CheckedAdd(_1, const 1_i32);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn very_unsafe_function() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::ops::Range<i32>;
    let mut _5: std::option::Option<i32>;
    let mut _6: &mut std::ops::Range<i32>;
    let mut _7: isize;
    let mut _8: (i32, bool);
    scope 1 {
        debug x => _1;
        let mut _4: std::ops::Range<i32>;
        scope 2 {
            debug iter => _4;
        }
        scope 3 {
        }
    }

    bb0: {
        _1 = const 0_i32;
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 100_i32 };
        _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _2;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::ops::Range<i32> as Iterator>::next(_6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = CheckedAdd(_1, const 1_i32);
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> [success: bb7, unwind continue];
    }

    bb6: {
        return;
    }

    bb7: {
        _1 = move (_8.0: i32);
        goto -> bb2;
    }
}
